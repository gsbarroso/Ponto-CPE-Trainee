// /src/hooks/useUsers.js

import { 
  getUsers, 
  getUserById, 
  createUser, 
  updateUser, 
  deleteUser 
} from '../services/user';

import { useEffect, useState } from 'react';

// Hook de Listagem
export const useUsers = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchUsers = async () => {
    try {
      const data = await getUsers();
      setUsers(data);
    } catch (error) {
      console.error('Erro ao buscar usuários:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  return { users, loading, fetchUsers };
};

// Hook para buscar usuário específico
export const useUser = (id) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  const fetchUser = async () => {
    try {
      const data = await getUserById(id);
      setUser(data);
    } catch (error) {
      console.error('Erro ao buscar usuário:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUser();
  }, [id]);

  return { user, loading, fetchUser };
};

// Hook de Criação
export const useCreateUser = () => {
  const [loading, setLoading] = useState(false);

  const handleCreateUser = async (user) => {
    try {
      setLoading(true);
      await createUser(user);
    } catch (error) {
      console.error('Erro ao criar usuário:', error);
    } finally {
      setLoading(false);
    }
  };

  return { handleCreateUser, loading };
};

// Hook de Atualização
export const useUpdateUser = () => {
  const [loading, setLoading] = useState(false);

  const handleUpdateUser = async (id, user) => {
    try {
      setLoading(true);
      await updateUser(id, user);
    } catch (error) {
      console.error('Erro ao atualizar usuário:', error);
    } finally {
      setLoading(false);
    }
  };

  return { handleUpdateUser, loading };
};

// Hook de Deleção
export const useDeleteUser = () => {
  const [loading, setLoading] = useState(false);

  const handleDeleteUser = async (id) => {
    try {
      setLoading(true);
      await deleteUser(id);
    } catch (error) {
      console.error('Erro ao deletar usuário:', error);
    } finally {
      setLoading(false);
    }
  };

  return { handleDeleteUser, loading };
};
